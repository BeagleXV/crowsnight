import React, { useEffect, useState } from 'react';
import { Box, Text, Flex, Image, VStack, HStack, Divider, Tooltip } from "@chakra-ui/react";
import { fetchConversionRate } from 'lib/pages/wallet/hive/hiveBalance';
import { VotingSummaryQuery, CurrationSummaryQuery } from './quries';
import { BalanceDisplay } from './hiveStats';

const SQL_ENDPOINT = 'https://www.stoken.quest/sql';

interface AccSummaryProps {
  username: string;
}

const AccSummary: React.FC<AccSummaryProps> = ({ username }) => {
  const [currationRewards, setCurrationRewards] = useState(0);
  const [voteRewards, setvoteRewards] = useState(0);
  const [totalVotes, setTotalVotes] = useState([] as any);
  const [totalAuthors, setTotalAuthors] = useState(0);
  const [conversionRate, setConversionRate] = useState(0);
  const [isLoading, setIsLoading] = useState(true);

  const getVotingSummary = async () => {
    // post request to hivesql edpoint
    const response = await fetch(SQL_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: VotingSummaryQuery(username),
      }),
    });

    const data = await response.json();

    setTotalVotes(data[0].number_of_votes);
    
    setTotalAuthors(data[0].number_of_unique_authors);

    setvoteRewards(data[0].total_vote_value);
  }

  const getCurationSummary = async () => {
    // post request to hivesql edpoint
    const response = await fetch(SQL_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: CurrationSummaryQuery(username),
      }),
    });

    const data = await response.json();
    
    setCurrationRewards(data[0].total_hp);
  }

  const getSummary = async () => {
    setIsLoading(true);

    await getVotingSummary();
    await getCurationSummary();

    const conversionRate = await fetchConversionRate();
    setConversionRate(conversionRate);

    setIsLoading(false);
  }

  useEffect(() => {
    if (username.length > 0)
      getSummary();
  }, [username]);

  return (
      <Box
              borderRadius="12px"
              border="2px solid red"
              padding="10px"
              width={['100%', '50%']} // Set width to 100% on mobile, 50% on other screen sizes
              margin="10px"
          >
            <VStack spacing={4} align="stretch">
                <Tooltip label={`Total value generated by @${username} for the skatehive community since the power up of 3 ETH worth of HIVE on 2022-12-08`} >
                  <Flex alignItems="center" justifyContent="center" padding="10px">
                      <Image
                          src={`https://cryptologos.cc/logos/hive-blockchain-hive-logo.png`}
                          borderRadius="20px"
                          boxSize="40px"
                      />
                      <Text
                          textAlign="center"
                          borderRadius="12px"
                          fontWeight="700"
                          fontSize="18px"
                          color="white"
                          padding="10px"
                      >
                        Account Summary
                      </Text>
                  </Flex>
                </Tooltip>
                <Divider backgroundColor="red" />

                {isLoading ? (
                    <Text color="white" align="center">Loading...</Text>
                ) : (
                    <>
                        <Flex alignItems="center" justifyContent="center">
                            <Text fontWeight="bold" color="orange">Total Value Generated: ${(voteRewards + (currationRewards * conversionRate)).toFixed(3)}</Text>
                        </Flex>
                        <Divider backgroundColor="red" />
                        <HStack spacing={4} align="stretch">
                            <BalanceDisplay 
                              label="Vote Rewards" 
                              balance={voteRewards.toFixed(3) + " HBD"}
                              labelTooltip="Total value of Votes given out in HBD (Hive Backed Dollars)"
                            />
                            <BalanceDisplay 
                              label="Curration Rewards" 
                              balance={currationRewards.toFixed(3) + " HP"}
                              labelTooltip="Total value of Curration Rewards in HP (Hive Power)"
                            />
                        </HStack>
                        <HStack spacing={4} align="stretch">
                            <BalanceDisplay 
                              label="Number of Votes" 
                              balance={totalVotes}
                              labelTooltip="Total number of votes given out"
                            />
                            <BalanceDisplay 
                              label="Unique Skaters Curated" 
                              balance={totalAuthors.toFixed(0)}
                              labelTooltip="Number of unique skaters curated"
                            />
                        </HStack>
                        <HStack
                            margin="10px"
                            borderRadius="10px"
                            border="1px dashed orange"
                            justifyContent="center"
                            padding="10px"
                        >
                            <Text color="white" fontSize="16px">
                              These stats are only from the account @{username} and do not include the vote trail that have been set up to support the skatehive community which increases the value of total rewards given out.
                            </Text>
                        </HStack>
                    </>
                )}
            </VStack>
      </Box>
    );
  
};

export default AccSummary;