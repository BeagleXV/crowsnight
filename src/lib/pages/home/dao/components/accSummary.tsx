import React, { useEffect, useState } from 'react';
import { Box, Text, Flex, Image, VStack, HStack, Divider, Tooltip, calc} from "@chakra-ui/react";
import { fetchConversionRate } from 'lib/pages/wallet/hive/hiveBalance';
import { VoteHistoryQuery, CurrationHistoryQuery } from './quries';
import { BalanceDisplay } from './hiveStats';

const SQL_ENDPOINT = 'https://www.stoken.quest/sql';

interface AccSummaryProps {
  username: string;
}

const AccSummary: React.FC<AccSummaryProps> = ({ username }) => {
  const [currationRewards, setCurrationRewards] = useState(0);
  const [voteRewards, setvoteRewards] = useState(0);
  const [VoteHistory, setVoteHistory] = useState([] as any);
  const [CurrationHistory, setCurrationHistory] = useState([] as any);
  const [conversionRate, setConversionRate] = useState(0);
  const [isLoading, setIsLoading] = useState(true);

  const getVoteHistory = async () => {
    // post request to hivesql edpoint
    const response = await fetch(SQL_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: VoteHistoryQuery(username),
      }),
    });

    const data = await response.json();

    setVoteHistory(data);
    
    let totalVoteRewards = 0;
    
    // the data includes (is available in the voteHistory for use)
    /* e.g.
      [
        {
          "author": "gnars",
          "permlink": "re-aggroed-2021129t101841z",
          "weight": 10000,
          "timestamp": "2021-01-29T10:18:42",
          "vote_value": 0.000000
        },
        ...
      ]
    */
    data.forEach((vote: any) => {
      totalVoteRewards += vote.vote_value;
    });

    setvoteRewards(totalVoteRewards);
  }

  const getCurrationHistory = async () => {
    // post request to hivesql edpoint
    const response = await fetch(SQL_ENDPOINT, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: CurrationHistoryQuery(username),
      }),
    });

    const data = await response.json();

    setCurrationHistory(data);
    
    let totalCurrationRewards = 0;
    
    // the data includes (is available in the currationHistory for use)
    /* e.g.
      [
        {
          "block_num": 56316741,
          "timestamp": "2021-01-29T10:18:42",
          "author": "gnars",
          "permlink": "re-aggroed-2021129t101841z",
          "hp": 0.000000
        },
        ...
      ]
    */
    data.forEach((curation: any) => {
      totalCurrationRewards += curation.hp;
    });

    setCurrationRewards(totalCurrationRewards);
  }

  const getSummary = async () => {
    setIsLoading(true);

    await getVoteHistory();
    await getCurrationHistory();

    const conversionRate = await fetchConversionRate();
    setConversionRate(conversionRate);

    setIsLoading(false);
  }

  useEffect(() => {
    if (username.length > 0)
      getSummary();
  }, [username]);

  return (
      <Box
              borderRadius="12px"
              border="2px solid red"
              padding="10px"
              width={['100%', '50%']} // Set width to 100% on mobile, 50% on other screen sizes
              margin="10px"
          >
            <VStack spacing={4} align="stretch">
                <Tooltip label={`Total value generated by @${username} since the power up of 3 ETH worth of HIVE on 2022-12-08`} >
                  <Flex alignItems="center" justifyContent="center" padding="10px">
                      <Image
                          src={`https://cryptologos.cc/logos/hive-blockchain-hive-logo.png`}
                          borderRadius="20px"
                          boxSize="40px"
                      />
                      <Text
                          textAlign="center"
                          borderRadius="12px"
                          fontWeight="700"
                          fontSize="18px"
                          color="white"
                          padding="10px"
                      >
                        Account Summary                   
                      </Text>
                  </Flex>
                </Tooltip>
                <Divider backgroundColor="red" />

                {isLoading ? (
                    <Text color="white" align="center">Loading...</Text>
                ) : (
                    <>
                        <Flex alignItems="center" justifyContent="center">
                            <Text fontWeight="bold" color="orange">Total Value Generated: ${(voteRewards + (currationRewards * conversionRate)).toFixed(3)}</Text>
                        </Flex>
                        <Divider backgroundColor="red" />
                        <HStack spacing={4} align="stretch">
                            <BalanceDisplay 
                              label="Vote Rewards" 
                              balance={voteRewards.toFixed(3) + " HBD"}
                              labelTooltip="Total value of Votes given out in HBD (Hive Backed Dollars)"
                            />
                            <BalanceDisplay 
                              label="Vote Rewards (HIVE)" 
                              balance={(voteRewards / conversionRate).toFixed(3) + " HIVE"}
                              labelTooltip="Total value of Votes given out in HIVE"
                            />
                        </HStack>
                        <HStack spacing={4} align="stretch">
                            <BalanceDisplay 
                              label="Curration Rewards" 
                              balance={currationRewards.toFixed(3) + " HP"}
                              labelTooltip="Total value of Curration Rewards in HP (Hive Power)"
                            />
                            <BalanceDisplay 
                              label="Curration Rewards (USD)" 
                              balance={"$" + (currationRewards * conversionRate).toFixed(2)}
                              labelTooltip="Total value of Curration Rewards in USD"
                            /> 
                        </HStack>
                    </>
                )}
            </VStack>
      </Box>
    );
  
};

export default AccSummary;